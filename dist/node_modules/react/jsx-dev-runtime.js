(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global["jsx-dev-runtime"] = {}));
})(this, (function (exports) { 'use strict';

	const supportSymbol = typeof Symbol === 'function' && Symbol.for;
	const REACT_ELEMENT_TYPE = supportSymbol
	    ? Symbol.for('react.element')
	    : 0xeac7;

	/**
	 * ReactElement 构造函数
	 * @param type element type
	 * @param props 组件的属性
	 * @param key 组件的key
	 * @param ref 组件的ref
	 * @returns
	 */
	const ReactElement = (type, props, key, ref) => {
	    const element = {
	        $$typeof: REACT_ELEMENT_TYPE,
	        type,
	        props,
	        key,
	        ref,
	        __mark: 'adekang'
	    };
	    return element;
	};
	function isValidElement(element) {
	    return (element !== null &&
	        typeof element === 'object' &&
	        element.$$typeof === REACT_ELEMENT_TYPE);
	}
	/**
	 * jsx 函数
	 * @param type 接受组件的type
	 * @param config 接受组件的配置
	 * @param maybeChildren 接受组件的子元素(可能不传)
	 * @returns
	 */
	const jsx = (type, config, ...maybeChildren) => {
	    let key = null;
	    const props = {};
	    let ref = null;
	    //  遍历config对象，将key和ref属性单独处理，其他属性放到props对象中
	    for (const prop in config) {
	        const val = config[prop];
	        if (prop === 'key') {
	            if (val !== undefined) {
	                key = '' + val;
	            }
	            continue;
	        }
	        if (prop === 'ref') {
	            if (val !== undefined) {
	                ref = val;
	            }
	            continue;
	        }
	        // 其他自己的属性放到props对象中，而不是原型链上的属性
	        if ({}.hasOwnProperty.call(config, prop)) {
	            props[prop] = val;
	        }
	    }
	    // props.children  可能是一个元素，也可能是多个元素
	    const maybeChildrenLength = maybeChildren.length;
	    if (maybeChildrenLength) {
	        if (maybeChildrenLength === 1) {
	            // 只有一个子元素的时候，直接将子元素放到props对象中
	            props.children = maybeChildren[0];
	        }
	        else if (maybeChildrenLength > 1) {
	            // 有多个子元素的时候，将子元素放到props对象中
	            props.children = maybeChildren;
	        }
	    }
	    return ReactElement(type, props, key, ref);
	};
	// jsxDEV
	const jsxDEV = (type, config) => {
	    let key = null;
	    const props = {};
	    let ref = null;
	    //  遍历config对象，将key和ref属性单独处理，其他属性放到props对象中
	    for (const prop in config) {
	        const val = config[prop];
	        if (prop === 'key') {
	            if (val !== undefined) {
	                key = '' + val;
	            }
	            continue;
	        }
	        if (prop === 'ref') {
	            if (val !== undefined) {
	                ref = val;
	            }
	            continue;
	        }
	        // 其他自己的属性放到props对象中，而不是原型链上的属性
	        if ({}.hasOwnProperty.call(config, prop)) {
	            props[prop] = val;
	        }
	    }
	    return ReactElement(type, props, key, ref);
	};

	exports.isValidElement = isValidElement;
	exports.jsx = jsx;
	exports.jsxDEV = jsxDEV;

}));
