(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.client = global.client || {}, global.client.js = factory()));
})(this, (function () { 'use strict';

	const FunctionComponent = 0; // 函数组件
	const HostRoot = 3; // 根节点类型
	const HostComponent = 5; // 原生节点
	const HostText = 6; // 文本节点

	const NoFlags = 0b0000000; // 当前没有标记吧
	const Placement = 0b0000001; // 插入
	const Update = 0b0000010; // 更新
	const ChildDeletion = 0b0000100; // 删除子节点
	const Ref = 0b0010000;
	const Visibility = 0b0100000;
	const MutationMask = Placement | Update | ChildDeletion | Ref | Visibility;

	class FiberNode {
	    type;
	    tag;
	    pendingProps;
	    key;
	    stateNode;
	    ref;
	    index;
	    sibling;
	    child;
	    return;
	    memoizedProps;
	    memoizedState;
	    alternate;
	    flags;
	    subtreeFlags;
	    updateQueue;
	    /**
	     *
	     * @param tag 标签
	     * @param pendingProps 待更新的props
	     * @param key key
	     */
	    constructor(tag, pendingProps, key) {
	        // 实例
	        this.tag = tag;
	        this.key = key;
	        // 用于保存与该fiber节点相关联的DOM节点或组件实例信息
	        this.stateNode = null;
	        // 例如若是 函数组件 则保存的是 ()=>{} 函数
	        this.type = null;
	        // 构成链表结构
	        // 指向父fiberNode
	        this.return = null;
	        // 指向第一个子fiberNode
	        this.child = null;
	        // 指向下一个兄弟fiberNode
	        this.sibling = null;
	        // 当前fiber的index
	        this.index = 0;
	        this.ref = null;
	        // 作为工作单元
	        // 刚开始工作的props是什么
	        this.pendingProps = pendingProps;
	        // 工作完后确定下来的props是什么
	        this.memoizedProps = null; // 已经更新完的属性
	        this.memoizedState = null; // 更新完成后新的 State
	        this.updateQueue = null; // 更新计划队列
	        // 指向节点的备份节点，用于在协调过程中进行比较
	        this.alternate = null;
	        // 表示节点的副作用类型，如更新、插入、删除等
	        this.flags = NoFlags;
	        // / 表示子节点的副作用类型，如更新、插入、删除等
	        this.subtreeFlags = NoFlags;
	    }
	}
	/**
	 * FiberRootNode
	 */
	class FiberRootNode {
	    container;
	    current;
	    finishedWork; // 最终更新完成以后的fiber树
	    /**
	     * @param container  容器
	     * @param hostRootFiber DOM根节点
	     */
	    constructor(container, hostRootFiber) {
	        this.container = container;
	        this.current = hostRootFiber;
	        hostRootFiber.stateNode = this;
	        this.finishedWork = null;
	    }
	}
	/**
	 * 创建一个新的fiberNode
	 * @param current 当前工作的fiberNode
	 * @param pendingProps 刚开始工作的props
	 * @returns 返回一个新的fiberNode
	 */
	const createWorkInProgress = (current, pendingProps) => {
	    let wip = current.alternate;
	    if (wip == null) {
	        // 首屏渲染时（mount）
	        wip = new FiberNode(current.tag, pendingProps, current.key);
	        wip.stateNode = current.stateNode;
	        wip.alternate = current;
	        current.alternate = wip;
	    }
	    else {
	        // 非首屏渲染时（update）
	        wip.pendingProps = pendingProps;
	        wip.flags = NoFlags;
	        wip.subtreeFlags = NoFlags;
	    }
	    wip.type = current.type;
	    wip.updateQueue = current.updateQueue; // 共用同一个 updateQueue对象
	    wip.child = current.child;
	    wip.memoizedState = current.memoizedState;
	    wip.memoizedProps = current.memoizedProps;
	    return wip;
	};
	/**
	 * 创建一个fiberNode
	 * @param element
	 * @returns
	 */
	function createFiberFromElement(element) {
	    const { type, key, props } = element;
	    let fiberTag = FunctionComponent;
	    if (typeof type === 'string') {
	        fiberTag = HostComponent;
	    }
	    else if (typeof type !== 'function' && true) {
	        console.warn('未定义的type类型', element);
	    }
	    const fiber = new FiberNode(fiberTag, props, key);
	    fiber.type = type;
	    return fiber;
	}

	/**
	 * 创建一个更新 创建update实例
	 * @param action 传入的值 或者函数
	 * @returns 返回一个更新
	 */
	const createUpdate = (action) => {
	    return {
	        action
	    };
	};
	/**
	 * 创建一个更新队列
	 * @returns  返回一个更新队列
	 */
	const createUpdateQueue = () => {
	    return {
	        shared: {
	            pending: null
	        }
	    };
	};
	/**
	 * 向队列中添加更新 向updateQueue 里面增加一个update
	 * @param updateQueue 要更新的队列
	 * @param update 更新值
	 */
	const enqueueUpdate = (updateQueue, update) => {
	    updateQueue.shared.pending = update;
	};
	/**
	 * UpdateQueue消费update  计算状态的最新值
	 * @param baseState 初始状态
	 * @param pendingUpdate 待消费的update
	 * @return 返回一个新的状态 memoizedState
	 */
	const processUpdateQueue = (baseState, pendingUpdate) => {
	    const result = {
	        memoizedState: baseState
	    };
	    if (pendingUpdate !== null) {
	        const action = pendingUpdate.action;
	        // action 传的是函数 还是值
	        if (action instanceof Function) {
	            // baseState 1 update (x)=>2*x -> memoizedState 2
	            result.memoizedState = action(baseState);
	        }
	        else {
	            // baseState 1 update 2 -> memoizedState 2
	            result.memoizedState = action;
	        }
	    }
	    return result;
	};

	const supportSymbol = typeof Symbol === 'function' && Symbol.for;
	const REACT_ELEMENT_TYPE = supportSymbol
	    ? Symbol.for('react.element')
	    : 0xeac7;

	/**
	 * 用于处理子节点的协调器
	 * @param shouldTrackSideEffects  是否追踪副作用
	 */
	function childReconciler(shouldTrackSideEffects) {
	    function reconcileSingleElement(returnFiber, currentFiber, element) {
	        // 根据element创建fiber
	        const fiber = createFiberFromElement(element);
	        fiber.return = returnFiber;
	        return fiber;
	    }
	    function reconcileSingleTextNode(returnFiber, currentFiber, content) {
	        const fiber = new FiberNode(HostText, { content }, null);
	        fiber.return = returnFiber;
	        return fiber;
	    }
	    /**
	     * 插入单一的节点
	     * @param fiber
	     */
	    function placeSingleChild(fiber) {
	        // fiber是wip的fiber  这是一个首屏渲染的过程
	        // 首屏渲染且追踪副作用时，才添加更新 flags
	        if (shouldTrackSideEffects && fiber.alternate === null) {
	            // TODO
	            fiber.flags |= Placement;
	        }
	        return fiber;
	    }
	    return function reconcileChildFibers(returnFiber, currentFiber, newChild) {
	        // 判断当前fiber的类型
	        if (typeof newChild === 'object' && newChild !== null) {
	            switch (newChild.$$typeof) {
	                case REACT_ELEMENT_TYPE:
	                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFiber, newChild));
	                default:
	                    {
	                        console.warn('reconcileChildFibers: 未知的ReactElementType', newChild);
	                    }
	                    break;
	            }
	        }
	        // TODO 多节点的情况 ul>li*3
	        // 多个 Fragment 节点
	        if (Array.isArray(newChild)) {
	            // TODO: 暂时不处理
	            {
	                console.warn('未实现的 reconcile 类型', newChild);
	            }
	        }
	        //  HOST_TEXT 文本节点的情况
	        if (typeof newChild === 'string' || typeof newChild === 'number') {
	            return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFiber, newChild));
	        }
	        {
	            console.warn('reconcileChildFibers: 未知的ReactElementType', newChild);
	        }
	        return null;
	    };
	}
	const reconcileChildFibers = childReconciler(true);
	const mountChildFibers = childReconciler(false);

	/**
	 * 递归中的递阶段
	 */
	function beginWork(wip) {
	    // 比较 返回子fiberNode
	    switch (wip.tag) {
	        case HostRoot:
	            return updateHostRoot(wip);
	        case HostComponent:
	            return updateHostComponent(wip);
	        case HostText:
	            return null;
	        default:
	            {
	                console.warn('beginWork: 未知的tag类型');
	            }
	            break;
	    }
	    return null;
	}
	/**
	 * 更新HostRoot
	 * @param wip
	 */
	function updateHostRoot(wip) {
	    const baseState = wip.memoizedState;
	    const updateQueue = wip.updateQueue;
	    // 参与计算的值
	    const pending = updateQueue.shared.pending;
	    updateQueue.shared.pending = null;
	    const { memoizedState } = processUpdateQueue(baseState, pending);
	    wip.memoizedState = memoizedState;
	    const nextChildren = wip.memoizedState;
	    reconcileChildren(wip, nextChildren);
	    return wip.child;
	}
	/**
	 * 更新HostComponent
	 * @param wip
	 */
	function updateHostComponent(wip) {
	    const nextProps = wip.pendingProps;
	    const nextChildren = nextProps.children;
	    reconcileChildren(wip, nextChildren);
	    return wip.child;
	}
	function reconcileChildren(wip, children) {
	    // 获取父节点的currentNode
	    const current = wip.alternate;
	    if (current !== null) {
	        // update
	        wip.child = reconcileChildFibers(wip, current?.child, children);
	    }
	    else {
	        // mount
	        wip.child = mountChildFibers(wip, null, children);
	    }
	}

	const createInstance = (type, props) => {
	    // TODO 处理props
	    const element = document.createElement(type);
	    return element;
	};
	const appendInitialChild = (parent, child) => {
	    parent.appendChild(child);
	};
	const createTxtInstance = (content) => {
	    return document.createTextNode(content);
	};
	const appendChildToContainer = appendInitialChild;

	let nextEffect = null;
	function commitMutationEffects(finishedWork) {
	    nextEffect = finishedWork;
	    while (nextEffect !== null) {
	        const child = nextEffect.child;
	        if ((nextEffect.subtreeFlags & MutationMask) !== NoFlags &&
	            child !== null) {
	            nextEffect = child;
	        }
	        else {
	            // 从当前节点开始向上遍历 DFS
	            up: while (nextEffect !== null) {
	                // 处理 flags
	                commitMutationEffectsOnFiber(nextEffect);
	                const sibling = nextEffect.sibling;
	                // 遍历兄弟节点
	                if (sibling !== null) {
	                    nextEffect = sibling;
	                    break up;
	                }
	                // 遍历父节点
	                nextEffect = nextEffect.return;
	            }
	        }
	    }
	}
	/**
	 *
	 * @param finishedWork 真正存在flags的节点
	 *
	 */
	const commitMutationEffectsOnFiber = (finishedWork) => {
	    const flags = finishedWork.flags;
	    if ((flags & Placement) !== NoFlags) {
	        commitPlacement(finishedWork);
	        finishedWork.flags &= ~Placement; // 移除Placement标记
	    }
	    if ((flags & Update) !== NoFlags) {
	        // TODO
	        finishedWork.flags &= ~Update;
	    }
	    if ((flags & ChildDeletion) !== NoFlags) {
	        // TODO
	        finishedWork.flags &= ~ChildDeletion;
	    }
	};
	// 执行 DOM 插入操作，将 FiberNode 对应的 DOM 插入 parent DOM 中
	const commitPlacement = (finishedWork) => {
	    {
	        console.warn('执行Placement操作', finishedWork);
	    }
	    const hostParent = getHostParent(finishedWork);
	    if (hostParent !== null) {
	        appendPlacementIntoContainer(finishedWork, hostParent);
	    }
	};
	// 获取 parent DOM
	const getHostParent = (fiber) => {
	    let parent = fiber.return;
	    while (parent !== null) {
	        if (parent.tag === HostComponent) {
	            return parent.stateNode;
	        }
	        if (parent.tag === HostRoot) {
	            return parent.stateNode.container;
	        }
	        parent = parent.return;
	    }
	    {
	        console.warn('未找到 host parent', fiber);
	    }
	    return null;
	};
	function appendPlacementIntoContainer(finishedWork, hostParent) {
	    if (finishedWork.tag === HostComponent || finishedWork.tag === HostText) {
	        appendChildToContainer(hostParent, finishedWork.stateNode);
	        return;
	    }
	    const child = finishedWork.child;
	    if (child !== null) {
	        appendPlacementIntoContainer(child, hostParent);
	        let sibling = child.sibling;
	        if (sibling !== null) {
	            appendPlacementIntoContainer(sibling, hostParent);
	            sibling = sibling.sibling;
	        }
	    }
	}

	/**
	 * 递归中的归阶段
	 */
	function completeWork(wip) {
	    const newProps = wip.pendingProps;
	    const current = wip.alternate;
	    switch (wip.tag) {
	        case HostComponent:
	            // 无需处理
	            if (current !== null && wip.stateNode) ;
	            else {
	                // mount
	                // 1.构建DOM;
	                const instance = createInstance(wip.type);
	                // 2.将DOM插入到DOM树中
	                appendAllChildren(instance, wip);
	                wip.stateNode = instance;
	            }
	            bubbleProperties(wip);
	            return null;
	        case HostRoot:
	            // 无需处理
	            bubbleProperties(wip);
	            return null;
	        case HostText:
	            // 无需处理
	            if (current !== null && wip.stateNode) ;
	            else {
	                // mount
	                // 1.构建DOM;
	                const instance = createTxtInstance(newProps.content);
	                // 2.将DOM插入到DOM树中
	                wip.stateNode = instance;
	            }
	            bubbleProperties(wip);
	            return null;
	        default:
	            {
	                console.warn('completeWork: 未知的tag类型', wip);
	            }
	            break;
	    }
	    return null;
	}
	function appendAllChildren(parent, wip) {
	    let node = wip.child;
	    while (node !== null) {
	        if (node.tag === HostComponent || node.tag === HostText) {
	            // 递归处理子节点
	            appendInitialChild(parent, node?.stateNode);
	        }
	        else if (node.child !== null) {
	            // 先处理子节点
	            node.child.return = node;
	            // 递归处理子节点
	            node = node.child;
	            continue;
	        }
	        if (node === wip) {
	            return;
	        }
	        // 处理兄弟节点
	        while (node.sibling === null) {
	            if (node.return === null || node.return === wip) {
	                return;
	            }
	            // 回溯到父节点
	            node = node?.return;
	        }
	        node.sibling.return = node.return;
	        node = node.sibling;
	    }
	}
	// 收集更新 flags，将子 FiberNode 的 flags 冒泡到父 FiberNode 上
	function bubbleProperties(wip) {
	    let subtreeFlags = NoFlags;
	    let child = wip.child;
	    while (child !== null) {
	        subtreeFlags |= child.subtreeFlags;
	        subtreeFlags |= child.flags;
	        child.return = wip;
	        child = child.sibling;
	    }
	    wip.subtreeFlags |= subtreeFlags;
	}

	// wip: work in progress
	let wip = null;
	//  指向需要遍历的第一个fiberNode
	function prepareFreshStack(root) {
	    wip = createWorkInProgress(root.current, {});
	}
	/**
	 * 在fiber上调度更新
	 * @param fiber
	 */
	function scheduleUpdateOnFiber(fiber) {
	    // todo 调度功能
	    const root = markUpdateFromFiberToRoot(fiber);
	    renderRoot(root);
	}
	function markUpdateFromFiberToRoot(fiber) {
	    let node = fiber;
	    let parent = node.return;
	    // 找到根节点
	    while (parent !== null) {
	        node = parent;
	        parent = node.return;
	    }
	    if (node.tag === HostRoot) {
	        return node.stateNode;
	    }
	    return null;
	}
	function renderRoot(root) {
	    // 初始化
	    prepareFreshStack(root);
	    do {
	        try {
	            workLoop();
	            break;
	        }
	        catch (e) {
	            {
	                console.error('workLoop发生错误', e);
	            }
	            wip = null;
	        }
	    } while (true);
	    const finishedWork = root.current.alternate;
	    root.finishedWork = finishedWork;
	    // 这里已经生成了wip fiberNode树 树中带有 flags
	    commitRoot(root);
	}
	/**
	 * commit阶段的入口
	 * @param root
	 */
	function commitRoot(root) {
	    const finishedWork = root.finishedWork;
	    if (finishedWork === null) {
	        return;
	    }
	    {
	        console.warn('commit阶段开始', finishedWork);
	    }
	    // 重置
	    root.finishedWork = null;
	    // 判断是否存在3个阶段需要执行的操作
	    // root flags  root subtreeFlags
	    const subtreeHasEffect = (finishedWork.subtreeFlags & MutationMask) != NoFlags;
	    const rootHasEffect = (finishedWork.flags & MutationMask) != NoFlags;
	    if (subtreeHasEffect || rootHasEffect) {
	        // beforeMutation
	        // mutation
	        commitMutationEffects(finishedWork);
	        root.current = finishedWork;
	        // layout
	    }
	    else {
	        root.current = finishedWork;
	    }
	}
	/**
	 * render阶段的入口
	 */
	function workLoop() {
	    while (wip !== null) {
	        preformUnitOfWork(wip);
	    }
	}
	function preformUnitOfWork(fiber) {
	    const next = beginWork(fiber);
	    fiber.memoizedProps = fiber.pendingProps;
	    if (next === null) {
	        completeUnitOfWork(fiber);
	    }
	    else {
	        wip = next;
	    }
	}
	/**
	 * 没有子节点遍历兄弟节点
	 * @param fiber
	 */
	function completeUnitOfWork(fiber) {
	    let node = fiber;
	    do {
	        completeWork(node);
	        const sibling = node.sibling;
	        if (sibling !== null) {
	            wip = sibling;
	            return;
	        }
	        node = node.return;
	        wip = node;
	    } while (node !== null);
	}

	/**
	 * 创建容器
	 * @param container
	 * @returns
	 */
	function createContainer(container) {
	    const hostRootFiber = new FiberNode(HostRoot, {}, null);
	    const root = new FiberRootNode(container, hostRootFiber);
	    hostRootFiber.updateQueue = createUpdateQueue();
	    return root;
	}
	/**
	 * 更新容器
	 * @param element
	 * @param root
	 * @returns
	 */
	function updateContainer(element, root) {
	    const hostRootFiber = root.current;
	    const update = createUpdate(element);
	    enqueueUpdate(hostRootFiber.updateQueue, update);
	    scheduleUpdateOnFiber(hostRootFiber);
	    return element;
	}

	// ReactDOM.createRoot(root).render(<App/>);
	function createRoot(container) {
	    const root = createContainer(container);
	    return {
	        render(element) {
	            updateContainer(element, root);
	        }
	    };
	}

	var ReactDOM = /*#__PURE__*/Object.freeze({
		__proto__: null,
		createRoot: createRoot
	});

	return ReactDOM;

}));
